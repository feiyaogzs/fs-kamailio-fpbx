services:
  traefik:
    image: traefik:v3.0.1
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--serversTransport.insecureSkipVerify=true"
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_letsencrypt:/letsencrypt"
    networks:
      - nw-default

  kamailio:
    image: kamailio/kamailio-ci:5.4
    container_name: kamailio
    restart: unless-stopped
    volumes:
      - "${PWD}/kamailio:/etc/kamailio:rw"
    depends_on:
      postgres_kamailio:
        condition: service_healthy
      rtpengine:
        condition: service_healthy
    networks:
      nw-default:
        ipv4_address: 10.1.0.200
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${KAMAILIO_PORT:-5060}:${KAMAILIO_PORT:-5060}/udp"
      - "${KAMAILIO_PORT:-5060}:${KAMAILIO_PORT:-5060}"

  rtpengine:
    image: fonoster/rtpengine:latest
    network_mode: "host"
    healthcheck:
      test: ["CMD-SHELL", "apt-get update && apt-get install -y procps && ps aux | grep rtpengine"]
      interval: 10s
      retries: 5
    environment:
      PUBLIC_IP: ${DOCKER_HOST_ADDRESS}
      PORT_MIN: 10000
      PORT_MAX: 20000
      LOG_LEVEL: '6'

  postgres_kamailio:
    container_name: postgres_kamailio
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: kamailio
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
    volumes:
      - postgres_kamailio_volume:/var/lib/postgresql/data
      - "${PWD}/kamailio:/etc/kamailio:rw"
      - "${PWD}/kamailio/kamailio.sql:/docker-entrypoint-initdb.d/init.sql"
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      nw-default:
        ipv4_address: 10.1.0.222

  freeswitch_one:
    container_name: freeswitch_one
    build:
      context: ./freeswitch
      dockerfile: Dockerfile
    depends_on:
      postgres_one:
        condition: service_healthy
    volumes:
      - freeswitch_one_conf:/usr/local/freeswitch/conf
      - freeswitch_one_sounds:/usr/local/freeswitch/sounds
      - freeswitch_one_db:/usr/local/freeswitch/db
      - freeswitch_one_recordings:/usr/local/freeswitch/recordings
      - freeswitch_one_storage:/usr/local/freeswitch/storage
      - freeswitch_one_scripts:/usr/local/freeswitch/scripts
      - ${PWD}/freeswitch/conf:/mnt/conf:ro"
    restart: unless-stopped
    expose:
      - "5080/udp"
      - "5080"
      - "5090/udp"
      - "5090"
      - "8021"
      - "5060"
      - "5060/udp"
    environment:
      - ADMIN_USERNAME=${FUSIONPBX_ONE_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${FUSIONPBX_ONE_ADMIN_PASSWORD}
      - DOMAIN_NAME=${FUSIONPBX_ONE_DOMAIN}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_HOST=postgres_one
      - FS_HOST=freeswitch_one
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fusionpbx_one.rule=Host(`${FUSIONPBX_ONE_DOMAIN}`)"
      - "traefik.http.routers.fusionpbx_one.entrypoints=websecure"
      - "traefik.http.routers.fusionpbx_one.tls.certresolver=myresolver"
      - "traefik.http.routers.fusionpbx_one.tls=true"
      - "traefik.http.services.fusionpbx_one.loadbalancer.server.port=443"
      - "traefik.http.services.fusionpbx_one.loadbalancer.server.scheme=https"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      nw-default:
        ipv4_address: 10.1.0.101
    entrypoint: ["/bin/sh", "-c", "exec /usr/local/bin/entrypoint.sh"]

  freeswitch_two:
    container_name: freeswitch_two
    build:
      context: ./freeswitch
      dockerfile: Dockerfile
    depends_on:
      postgres_two:
        condition: service_healthy
    volumes:
      - freeswitch_two_conf:/usr/local/freeswitch/conf
      - freeswitch_two_sounds:/usr/local/freeswitch/sounds
      - freeswitch_two_db:/usr/local/freeswitch/db
      - freeswitch_two_recordings:/usr/local/freeswitch/recordings
      - freeswitch_two_storage:/usr/local/freeswitch/storage
      - freeswitch_two_scripts:/usr/local/freeswitch/scripts
      - ${PWD}/freeswitch/conf:/mnt/conf:ro"
    restart: unless-stopped
    expose:
      - "5080/udp"
      - "5080"
      - "5090/udp"
      - "5090"
      - "8021"
      - "5060"
      - "5060/udp"
    environment:
      - ADMIN_USERNAME=${FUSIONPBX_TWO_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${FUSIONPBX_TWO_ADMIN_PASSWORD}
      - DOMAIN_NAME=${FUSIONPBX_TWO_DOMAIN}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_HOST=postgres_two
      - FS_HOST=freeswitch_two
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fusionpbx_two.rule=Host(`${FUSIONPBX_TWO_DOMAIN}`)"
      - "traefik.http.routers.fusionpbx_two.entrypoints=websecure"
      - "traefik.http.routers.fusionpbx_two.tls.certresolver=myresolver"
      - "traefik.http.routers.fusionpbx_two.tls=true"
      - "traefik.http.services.fusionpbx_two.loadbalancer.server.port=443"
      - "traefik.http.services.fusionpbx_two.loadbalancer.server.scheme=https"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      nw-default:
        ipv4_address: 10.1.0.102
    entrypoint: ["/bin/sh", "-c", "exec /usr/local/bin/entrypoint.sh"]

  postgres_one:
    container_name: postgres_one
    image: postgres:16.1
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
    volumes:
      - postgres_one_volume:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      nw-default:
        ipv4_address: 10.1.0.21

  postgres_two:
    container_name: postgres_two
    image: postgres:16.1
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
    volumes:
      - postgres_two_volume:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: unless-stopped
    networks:
      nw-default:
        ipv4_address: 10.1.0.22

networks:
  nw-default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24

volumes:
  postgres_one_volume: {}
  postgres_two_volume: {}
  postgres_kamailio_volume: {}
  freeswitch_one_conf: {}
  freeswitch_one_sounds: {}
  freeswitch_one_db: {}
  freeswitch_one_recordings: {}
  freeswitch_one_storage: {}
  freeswitch_one_scripts: {}
  freeswitch_two_conf: {}
  freeswitch_two_sounds: {}
  freeswitch_two_db: {}
  freeswitch_two_recordings: {}
  freeswitch_two_storage: {}
  freeswitch_two_scripts: {}
  traefik_letsencrypt: {}
