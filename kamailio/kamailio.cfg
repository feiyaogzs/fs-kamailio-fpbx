#!KAMAILIO

#!ifdef WITH_DEBUG
#!define DBGLEVEL 3
#!else
#!define DBGLEVEL 1
#!endif

#!define WITH_DEBUG

#!define WITH_PGSQL
#!define WITH_AUTH
#!define WITH_NAT
#!define WITH_RTPENGINE
#!define WITH_MULTIDOMAIN
#!define WITH_TLS
#!define WITH_JSONRPC

#!define FLT_FS 10
#!define FLT_DID 11
#!define FLT_INV 12
#!define FLT_WS 13
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#	FLB_ - per branch flags
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!substdef "!KAMAILIO_IP!10.1.0.200!g"
#!substdef "!FloatIP!floatip!g"
#!substdef "!WEBSOCKETPORT!8443!g"
#!substdef "!KamailioAPI!2443!g"
#!substdef "!INCOMINGPORTRELAY!5070!g"
#!substdef "!InternalRTPEngine!host.docker.internal!g"

#!ifdef WITH_PGSQL
#!define DBURL "postgres://postgres:slakn09adsfm2@postgres_kamailio:5432/kamailio"
#!endif

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

debug=DBGLEVEL
log_stderror=no
mem_join=1
log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

memdbg=5
memlog=5

children=8
tcp_children=8

listen=udp:10.1.0.200:5060 advertise 10.1.0.200:5060
listen=tls:10.1.0.200:WEBSOCKETPORT advertise 10.1.0.200:WEBSOCKETPORT
listen=tcp:10.1.0.200:5060 advertise 10.1.0.200:5060
listen=tls:10.1.0.200:KamailioAPI advertise 10.1.0.200:KamailioAPI

#!ifdef WITH_TLS
enable_tls=yes
tls_max_connections=2048
#!endif

tls_port_no = 5061

tcp_connection_lifetime=3605
tcp_max_connections=8192

#!ifdef WITH_JSONRPC
tcp_accept_no_cl=yes
#!endif

enable_sctp=no

#!ifdef WITH_PGSQL
loadmodule "db_postgres.so"
loadmodule "sqlops.so"
#!endif

#!ifdef WITH_JSONRPC
loadmodule "xhttp.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "auth.so"
loadmodule "msrp.so"
loadmodule "websocket.so"
loadmodule "htable.so"
loadmodule "dispatcher.so"
loadmodule "uac.so"
loadmodule "path.so"
loadmodule "exec.so"

#!ifdef WITH_AUTH
loadmodule "auth_db.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"

#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
#!endif

#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

modparam("websocket", "keepalive_mechanism", 0)
modparam("websocket", "keepalive_timeout", 180)
modparam("websocket", "sub_protocols", 1)

modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "ds_probing_mode", 3)
modparam("dispatcher", "ds_probing_threshold", 9)
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:sbc@floatdomain.com")
modparam("dispatcher", "ds_ping_interval", 10)
modparam("dispatcher", "ds_inactive_threshold", 5)

modparam("sqlops","sqlcon","pgc=>postgres://postgres:slakn09adsfm2@postgres_kamailio:5432/kamailio")
modparam("db_postgres", "retries", 3)

modparam("jsonrpcs", "pretty_format", 1)

#!ifdef WITH_JSONRPC
modparam("jsonrpcs", "transport", 7)
#!endif

modparam("sanity", "autodrop", 0)
modparam("sanity", "default_checks", 2919)


modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000) // default 30s
modparam("tm", "fr_inv_timer", 120000)

modparam("rr", "enable_full_lr", 0)
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_double_rr", 0)

modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 0)

modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)

modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", MULTIDOMAIN)

#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
modparam("domain", "domain_table", "domain")
modparam("domain", "domain_attrs_table", "domain_attrs")
modparam("domain", "did_col", "domain")
modparam("domain", "register_myself", 0)
#!endif

#!ifdef WITH_NAT

#!ifdef WITH_RTPENGINE
modparam("rtpengine", "db_url", DBURL)
modparam("rtpengine", "setid_default", 0)
modparam("rtpengine", "rtpengine_disable_tout", 120)
#!endif
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
modparam("tls", "config", "/etc/kamailio/tls.cfg")
modparam("tls", "tls_debug", 10)
#!endif

#!ifdef WITH_DEBUG
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

modparam("htable", "htable", "vtp=>size=10;autoexpire=120;")

# ----- Routing Logic Section -----

# Main request routing logic
route {
    xlog("L_INFO", "Received request: $rm from $si:$sp to $ru\n");

    # Sanity checks
    if (!sanity_check("1511", "7")) {
        xlog("L_WARN", "Sanity check failed\n");
        send_reply("400", "Bad Request");
        exit;
    }

    # Handle registrations
    if (is_method("REGISTER")) {
        if (!save("location")) {
            xlog("L_ERR", "Failed to save registration\n");
            send_reply("500", "Server Internal Error");
        }
        exit;
    }

    # Handle INVITE requests
    if (is_method("INVITE")) {
        # Add Record-Route header to ensure dialog routing
        record_route();

        # Forward the call to FreeSWITCH
        t_relay_to_udp("10.1.0.101", "5060");
        exit;
    }

    # Handle other requests
    if (is_method("BYE|CANCEL|ACK|PRACK|UPDATE|SUBSCRIBE|NOTIFY|PUBLISH|INFO|MESSAGE|OPTIONS")) {
        if (!t_relay()) {
            send_reply("500", "Server Internal Error");
        }
        exit;
    }

    # Handle unhandled requests
    send_reply("501", "Not Implemented");
}

# Failure route handling
failure_route {
    xlog("L_INFO", "Entering failure route for request: $rm from $si:$sp to $ru\n");
    if (t_is_canceled()) {
        exit;
    }
    t_relay();
}