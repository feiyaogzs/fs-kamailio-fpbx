#!define WITH_PGSQL
#!define WITH_AUTH
#!define WITH_MULTIDOMAIN
#!define WITH_NAT

#!ifdef WITH_DEBUG
#!define DBGLEVEL 3
#!else
#!define DBGLEVEL 1
#!endif

#!substdef "!KAMAILIO_IP!0.0.0.0!g"
#!substdef "!KamailioAPI!2443!g"

#!ifdef WITH_PGSQL
#!define DBURL "postgres://postgres:slakn09adsfm2@localhost:5432/kamailio"
#!endif

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

debug=DBGLEVEL
log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

listen=udp:KAMAILIO_IP:5060 advertise KAMAILIO_IP:5060
listen=tcp:KAMAILIO_IP:5060 advertise KAMAILIO_IP:5060
listen=tls:KAMAILIO_IP:KamailioAPI advertise KAMAILIO_IP:KamailioAPI

loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "pv.so"
loadmodule "textops.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "xlog.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "auth.so"
loadmodule "siputils.so"

#!ifdef WITH_AUTH
loadmodule "auth_db.so"
#!endif

#!ifdef WITH_PGSQL
loadmodule "db_postgres.so"
loadmodule "sqlops.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
#!endif

modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000) // default 30s
modparam("tm", "fr_inv_timer", 120000)

#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
modparam("domain", "domain_table", "domain")
modparam("domain", "domain_attrs_table", "domain_attrs")
modparam("domain", "did_col", "domain")
modparam("domain", "register_myself", 0)
#!endif

request_route {
    route(REQINIT);

    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    #!ifdef WITH_NAT
    if (is_method("INVITE") || is_method("REGISTER")) {
        route(NAT);
    }
    #!endif

    if (is_method("REGISTER")) {
        route(AUTH);
    }

    route(DIALOG);
}

route[AUTH] {
    if (!auth_check("$fd", "subscriber", "1")) {
        auth_challenge("$fd", "1");
        exit;
    }
    if (is_method("REGISTER")) {
        save("location");
        exit;
    } else {
        return;
    }
}

route[NAT] {
    if (nat_uac_test("19")) {
        if (is_method("REGISTER")) {
            set_contact_alias();
        } else {
            if (is_first_hop()) {
                set_contact_alias();
            }
        }
    }
    return;
}

route[REQINIT] {
    force_rport;
}

route[DIALOG] {
    if (is_method("INVITE")) {
        route(AUTH);
        if (!lookup("location")) {
            sl_send_reply("403", "Forbidden");
            exit;
        }
        handle_ruri_alias();
        record_route();
        route(RELAY);
    }
    if (has_totag()) {
        if (loose_route()) {
            handle_ruri_alias();
            route(RELAY);
        }
    }
    if (is_method("ACK")) {
        if (t_check_trans()) {
            route(RELAY);
            exit;
        } else {
            exit;
        }
    }
}

route[RELAY] {
    t_on_reply("REPLY");
    t_relay();
}

onreply_route[REPLY] {
    route(NAT);
}
