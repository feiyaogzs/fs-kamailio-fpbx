#!KAMAILIO

#!ifdef WITH_DEBUG
#!define DBGLEVEL 3
#!else
#!define DBGLEVEL 1
#!endif

#!define WITH_PGSQL
#!define WITH_AUTH
#!define WITH_NAT
#!define WITH_RTPENGINE
#!define WITH_MULTIDOMAIN
#!define WITH_TLS
#!define WITH_JSONRPC

#!define FLT_FS 10
#!define FLT_DID 11
#!define FLT_INV 12
#!define FLT_WS 13
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#	FLB_ - per branch flags
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7
#!substdef "!KAMAILIO_IP!10.1.0.200!g"
#!substdef "!FloatIP!floatip!g"
#!substdef "!WEBSOCKETPORT!8443!g"
#!substdef "!KamailioAPI!2443!g"
#!substdef "!INCOMINGPORTRELAY!5070!g"
#!substdef "!InternalRTPEngine!host.docker.internal!g"

#!ifdef WITH_PGSQL
#!define DBURL "postgres://postgres:slakn09adsfm2@postgres_kamailio:5432/kamailio"
#!endif

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

debug=DBGLEVEL
log_stderror=no
mem_join=1
log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

memdbg=5
memlog=5

children=8
tcp_children=8

listen=udp:10.1.0.200:5060 advertise 10.1.0.200:5060
listen=tls:10.1.0.200:WEBSOCKETPORT advertise 10.1.0.200:WEBSOCKETPORT
listen=tcp:10.1.0.200:5060 advertise 10.1.0.200:5060
listen=tls:10.1.0.200:KamailioAPI advertise 10.1.0.200:KamailioAPI

#!ifdef WITH_TLS
enable_tls=yes
tls_max_connections=2048
#!endif

tls_port_no = 5061

tcp_connection_lifetime=3605
tcp_max_connections=8192

#!ifdef WITH_JSONRPC
tcp_accept_no_cl=yes
#!endif

enable_sctp=no

#!ifdef WITH_PGSQL
loadmodule "db_postgres.so"
loadmodule "sqlops.so"
#!endif

#!ifdef WITH_JSONRPC
loadmodule "xhttp.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "auth.so"
loadmodule "msrp.so"
loadmodule "websocket.so"
loadmodule "htable.so"
loadmodule "dispatcher.so"
loadmodule "uac.so"
loadmodule "path.so"
loadmodule "exec.so"

#!ifdef WITH_AUTH
loadmodule "auth_db.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"

#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
#!endif

#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

modparam("websocket", "keepalive_mechanism", 0)
modparam("websocket", "keepalive_timeout", 180)
modparam("websocket", "sub_protocols", 1)

modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "ds_probing_mode", 3)
modparam("dispatcher", "ds_probing_threshold", 9)
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:sbc@floatdomain.com")
modparam("dispatcher", "ds_ping_interval", 10)
modparam("dispatcher", "ds_inactive_threshold", 5)

modparam("sqlops","sqlcon","pgc=>postgres://postgres:slakn09adsfm2@postgres_kamailio:5432/kamailio")
modparam("db_postgres", "retries", 3)

modparam("jsonrpcs", "pretty_format", 1)

#!ifdef WITH_JSONRPC
modparam("jsonrpcs", "transport", 7)
#!endif

modparam("sanity", "autodrop", 0)

modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000) // default 30s
modparam("tm", "fr_inv_timer", 120000)

modparam("rr", "enable_full_lr", 0)
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_double_rr", 0)

modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 0)

modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)

modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", MULTIDOMAIN)

#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
modparam("domain", "domain_table", "domain")
modparam("domain", "domain_attrs_table", "domain_attrs")
modparam("domain", "did_col", "domain")
modparam("domain", "register_myself", 0)
#!endif

#!ifdef WITH_NAT

#!ifdef WITH_RTPENGINE
modparam("rtpengine", "db_url", DBURL)
modparam("rtpengine", "setid_default", 0)
modparam("rtpengine", "rtpengine_disable_tout", 120)
#!endif
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
modparam("tls", "config", "/etc/kamailio/tls.cfg")
modparam("tls", "tls_debug", 10)
#!endif

#!ifdef WITH_DEBUG
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

modparam("htable", "htable", "vtp=>size=10;autoexpire=120;")

request_route {
  if (is_method("OPTIONS") && $si == "KAMAILIO_IP") {
		options_reply();
	}

  route(REQINIT);

  # Mark the calls from Freeswitch/PBX servers to kamailio proxy
	if(ds_is_from_list("2")) {
		if (is_method("INVITE")){
			xlog("L_NOTICE", "From Freeswitch/Internal [FullIP=$si:$sp Type=$rm CLID=$fU Extension=$tU ExtIP=$td Domain=$fd Host=$si]\n");
		}
		setflag(FLT_FS);
	}

  route(NATDETECT);

  route(AUTH);

  if (is_method("CANCEL")) {
		if ($ru =~"pn_tok"){
			$sht(vtp=>id_index::$rU::$fd) = $null;
			$sht(vtp=>id_label::$rU::$fd) = $null;
		}
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

  # handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

  route(WITHINDLG);

  remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

  if (isflagset(FLT_FS)) {
		if ((is_method("INVITE")) && (!has_totag()) && ($ru =~"pn_tok")){
			if ($sht(vtp=>id_index::$rU::$fd) != $null) {
				send_reply("480", "Temporarily Unavailable");
				exit;
			}
			send_reply("100", "Suspending");
			xlog("L_INFO","[SUSPEND] Entered suspend mode\n");
			if ( !t_suspend() ) {
				xlog("L_NOTICE","[SUSPEND]  failed suspending trasaction [$T(id_index):$T(id_label)]\n");
				send_reply("501", "Suspending error");
				exit;
			} else{
				xlog("L_NOTICE","[SUSPEND]  suspended transaction [$T(id_index):$T(id_label)] $fU=> $rU add to rU fd=$fd or td=$td\n");
				$sht(vtp=>id_index::$rU::$fd) = $T(id_index);
				$sht(vtp=>id_label::$rU::$fd) = $T(id_label);
				xlog("L_NOTICE","[SUSPEND] htable key value [$sht(vtp=>id_index::$rU::$fd)   --   $sht(vtp=>id_label::$rU::$fd)]\n");
				route(SENDPUSH);
				exit;
			}
		} else{
			route(FROM_FS);
			exit;
		}
	}

  if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}

  route(REGISTRAR);

  route(PRESENCE);

  route(DISPATCH);

  if ($rU==$null) {
		sl_send_reply("484","Address Incomplete");
		exit;
	}
}

route[1] 
{
	# !! Nathelper
	if (uri=~"[@:](192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[0-1])\.)" && !search("^Route:")){
		sl_send_reply("479", "We don't forward to private IP addresses");
		exit;
	};
	
  if (has_body("application/sdp")) {
    if (isflagset(FLT_WS)){
      rtpengine_manage("UDP/TLS/TCP/RTP/SAVPF replace-origin replace-session-connection rtcp-mux-offer generate-mid DTLS=passive SDES-off ICE=force-relay trust-address");
    } else{
      rtpengine_manage("RTP/AVP replace-origin replace-session-connection rtcp-mux-demux DTLS=off SDES-off ICE=remove trust-address");
    }
  }

	if (FLT_WS) {
		t_on_reply("PNTOK");
	} else{
		t_on_reply("1");
	}

	if (!t_relay()) {
		sl_reply_error();
	};
}

route[REQINIT] 
{
	set_reply_no_connect();
	force_rport();

	if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent") {
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("17895", "7")) {
		xlog("Malformed SIP request from $si:$sp\n");
		exit;
	}
}

route[NATDETECT] {
#!ifdef WITH_NAT
	if (nat_uac_test("19")) {
		if (is_method("REGISTER") || !is_present_hf("Record-Route"))  {
			fix_nated_contact(); # Rewrite contact with source IP of signalling
			if ( is_method("INVITE") ) {			
				setbflag(6);
			}
		} else {
			if(is_first_hop()) {
				set_contact_alias();
			}
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

route[AUTH] {
#!ifdef WITH_AUTH
	if (is_method("REGISTER"))
	{
		if (!www_authorize("$td", "subscriber"))
		{
			www_challenge("$td", "0");
			exit;
		}
 
		if ($au!=$tU)
		{
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}
	} else {
		if (from_uri==myself)
		{
			if (!proxy_authorize("$fd", "subscriber")) {
				proxy_challenge("$fd", "0");
				exit;
			}
			if (is_method("PUBLISH"))
			{
				if ($au!=$tU) {
					sl_send_reply("403","Forbidden auth ID");
					exit;
				}
			} else {
				if ($au!=$fU) {
					sl_send_reply("403","Forbidden auth ID");
					exit;
				}
			}
 
			consume_credentials();
		} else {
			if (!uri==myself)
			{
				sl_send_reply("403","Not relaying");
				exit;
			}
		}
	}
#!endif
	return;
}

route[WITHINDLG] 
{
	if (!has_totag()) return;

	if (loose_route()) {
		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		} else if ( is_method("ACK") ) {
			route(NATMANAGE);
		} else if ( is_method("NOTIFY") ) {
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE") && uri == myself) {
		route(PRESENCE);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			route(RELAY);
			exit;
		} else {
			exit;
		}
	}
	if (isflagset(FLT_FS) && is_method("NOTIFY")) return;
	sl_send_reply("404","Not here");
	exit;
}

route[REGISTRAR] {
	if (is_method("REGISTER"))
	{
		if(isflagset(FLT_NATS))
		{
			setbflag(FLB_NATB);
		}
		if (!save("location"))
			sl_reply_error();
 
		exit;
	}
}

route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE")) return;

	if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
		sl_send_reply("404", "No voicemail service");
		exit;
	}

#!ifdef WITH_PRESENCE
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
		t_release();
	} else if(is_method("SUBSCRIBE")) {
		handle_subscribe();
		t_release();
	}
	exit;
#!endif

	if (is_method("PUBLISH") || $rU==$null) {
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

route[DISPATCH]
{	
	if ($td =~ "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}") {
		xlog("L_WARN", "Attempt for direct IP instead of domain [FullIP=$si:$sp Type=$rm Extension=$tU Domain=$td Host=$si]\n");
		send_reply("404", "No destination");
		exit;
	}
	if (lookup_domain("$td", "to_")) {
		if(!ds_select_dst("$avp(to_setid)", "8", "2")) {
			send_reply("404", "No destination");
			xlog("L_WARN", "No active server for domain $td [FullIP=$si:$sp Type=$rm Extension=$tU Domain=$td Host=$si]\n");
			exit;
		}
	} else {
		send_reply("404", "No destination");
		xlog("L_WARN", "No domain in dispatch list [FullIP=$si:$sp Type=$rm Extension=$tU Domain=$td Host=$si]\n");
		exit;
	}

	if (!isflagset(FLT_DID) && !isflagset(FLT_FS) && !isflagset(FLT_INV) && isflagset(FLT_ACC)) {
		setflag(FLT_INV);
		xlog("L_NOTICE", "Extension invite [FullIP=$si:$sp Type=$rm DID=$tU Extension=$fU Domain=$fd \n");
	}

	if (isflagset(FLT_DID)) {			
		$var(port)="5070;transport=UDP";			
	} else if ($pr == "tls") {			
		$var(port)="5061;transport=TLS";
	} else if ($pr == "tcp") {			
		$var(port)="5060;transport=TCP";
	} else {		
		$var(port)="5060;transport=UDP";
	}

	$du = $du+":"+$var(port);

	t_on_failure("RTF_DISPATCH");
	route(1);
	exit;
}

route[FROM_FS]
{
        route(RELAY);
        exit;
}

route[RELAY] 
{
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
	route(1);
}

event_route[xhttp:request] {
  set_reply_close();
  set_reply_no_connect();

  if ($Rp != 80 && $Rp != 443 && $Rp != KamailioAPI && $Rp != WEBSOCKETPORT) {
    xlog("L_WARN", "HTTP request received on $Rp\n");
    xhttp_reply("403", "Forbidden", "", "");
    exit;
  }

  if ($hdr(Upgrade)=~"websocket" && $hdr(Connection)=~"Upgrade" && $rm=~"GET") {
    if ($hdr(Host) == $null || !($hdr(Host) =~ "(^u[0-9]{9}\.ocil\.omnitelecom\.com:WEBSOCKETPORT)$")) {
            xlog("L_WARN", "Bad websocket request Bad host [domain=$hdr(Host))\n");
            xhttp_reply("403", "Forbidden", "", "");
            exit;
    }

    if (ws_handle_handshake())
    {
      exit;
    }
  }

  xhttp_reply("404", "Not found", "", "");
}

route[SENDPUSH] {
	sl_send_reply("100", "Pushing");
}